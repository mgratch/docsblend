<?php

/**
 * ctChapter shortcode
 */
class ctSectionShortcode extends ctShortcode implements ctVisualComposerShortcodeInterface {

	public function __construct() {
		parent::__construct(); // TODO: Change the autogenerated stub

		add_filter( 'ct.utility_class.add_custom_attributes.' . $this->getShortcodeName(), array(
			$this,
			'addUtilityClassAttribute'
		), 10, 2 );
	}
	/**
	 * Add custom attribute
	 *
	 * @param $data
	 * @param $shortcode
	 */

	public function addUtilityClassAttribute( $data, $shortcode ) {
		//we will add a default background if we are in dark flavour
		if ( isset( $data['class'] ) ) {
				$data['class'][] = '';

		}
		return $data;
	}

	/**
	 * Returns name
	 * @return string|void
	 */
	public function getName() {
		return 'Section';
	}

	/**
	 * Shortcode name
	 * @return string
	 */
	public function getShortcodeName() {
		return 'section';
	}

	/**
	 * Returns shortcode type
	 * @return mixed|string
	 */

	public function getShortcodeType() {
		return self::TYPE_SHORTCODE_ENCLOSING;
	}

	private $context = '';

	protected function getContainer( $type, $show = true, $class = '' ) {
		if ( $type == 'open' && $show == true ) {
			return '<div class="container' . ( $class ? ' ' . $class : '' ) . '">';
		} elseif ( $type = 'close' && $show == true ) {
			return '</div>';
		} else {
			return '';
		}
	}

	protected function getShadow($shadow){

		if($shadow=='yes'){
			return '<div class="ct-containerAbsolute">

        <div class="ct-flexslider-progress">
            <div class="ct-flexslider-progressBar"></div>
        </div>
        <div class="ct-containerAbsolute-inside"></div>
    </div>';
		}else{
			return'
			';
		}
	}
	public $var2 ='';
	protected function  getOverlay($overlay){

		if($overlay == 'yes'){
			$var2 = '<div class="ct-mediaSection-circleOverlay"></div>';
			$this->var2 = $var2;
			return  'ct-u-motiveDark--bg ct-mediaSection--circleOverlay';


		}else{

			$this->var2 = '';
			return  '';
		}
	}

	public function enqueueScripts() {
		wp_register_script( 'ct-jplayer', CT_THEME_ASSETS . '/js/jquery.jplayer.min.js', array( 'jquery' ), false, true );
		wp_enqueue_script( 'ct-jplayer' );
		wp_register_script('init_section', CT_THEME_ASSETS . '/js/ct-mediaSection/init.js', array('jquery'), false, true);
		wp_enqueue_script('init_section');

	}

	private function enqueueOnePagerScripts(){
		wp_register_script( 'pagescroller', CT_THEME_ASSETS . '/js/onepager/jquery.pagescroller.lite.js', array( 'jquery' ), false, true );
		wp_enqueue_script( 'pagescroller' );
		wp_register_script( 'pagescroller-init', CT_THEME_ASSETS . '/js/onepager/init.js', array( 'jquery' ), false, true );
		wp_enqueue_script( 'pagescroller-init' );
	}
	private function enqueueParallaxScripts(){
		wp_register_script('stellar', CT_THEME_ASSETS . '/js/ct-mediaSection/jquery.stellar.min.js', array('jquery'), false, true);
		wp_enqueue_script('stellar');
	}


	public function getParallaxSection( $atts, $contentRawHtml, $mainContainerAtts, $showContainer = true, $data = array() ) {
		$this->enqueueParallaxScripts();



		$atts = empty( $atts ) ? ( shortcode_atts( $this->extractShortcodeAttributes( $atts ), $atts ) ) : $atts;

		if ( isset( $data['page_header_wrapper'] ) && isset( $data['page_header_wrapper']['open'] ) && isset( $data['page_header_wrapper']['close'] ) ) {
			$pageHeaderOpen  = $data['page_header_wrapper']['open'];
			$pageHeaderClose = $data['page_header_wrapper']['close'];
		} else {
			$pageHeaderOpen  = '';
			$pageHeaderClose = '';
		}
		//var_dump($overlay = $this->getOverlay($atts['overlay']));


		$shadow = $this->getShadow($atts['shadow']);


		return '
<section' . $this->buildContainerAttributes( $mainContainerAtts, $atts ).'>
    <div class="ct-mediaSection-inner">
    ' . $pageHeaderOpen . $this->getContainer( 'open', $showContainer ) . $contentRawHtml . $this->getSectionButton( $atts ) . $this->getContainer( 'close', $showContainer ) . $pageHeaderClose . '

'.$this->var2 .'
    </div>
'. $shadow.'
</section>';

	}


	public function getKenBurnsSection( $atts = array(), $contentRawHtml, $mainContainerAtts, $showContainer = true, $data = array() ) {

		$atts = empty( $atts ) ? ( shortcode_atts( $this->extractShortcodeAttributes( $atts ), $atts ) ) : $atts;
		if ( isset( $data['page_header_wrapper'] ) && isset( $data['page_header_wrapper']['open'] ) && isset( $data['page_header_wrapper']['close'] ) ) {
			$pageHeaderOpen  = $data['page_header_wrapper']['open'];
			$pageHeaderClose = $data['page_header_wrapper']['close'];
		} else {
			$pageHeaderOpen  = '';
			$pageHeaderClose = '';
		}

		$imageHtml = '';
		if ( isset( $data['image_custom_html'] ) ) {
			$imageHtml = $data['image_custom_html'];
		} else {
			$images = explode( ",", $atts['kenburns_images'] );
			if ( is_array( $images ) ) {
				//we can't have only 2 images (script reason)
				if ( count( $images == 2 ) ) {
					$images[2] = $images[0];
				}
				foreach ( $images as $url ) {
					$imageHtml .= '<img src="' . esc_url( $url ) . '" alt="' . __( 'kenburns image', 'ct_theme' ) . '">';
				}
			}
		}

		$shadow = $this->getShadow($atts['shadow']);

		return '
<section' . $this->buildContainerAttributes( $mainContainerAtts, $atts ) . '>
    <div class="ct-mediaSection-kenburnsImageContainer">
        ' . $imageHtml . '
    </div>
    <div class="ct-mediaSection-inner">
    ' . $pageHeaderOpen . $this->getContainer( 'open', $showContainer ) . $contentRawHtml . $this->getSectionButton( $atts ) . $this->getContainer( 'close', $showContainer ) . $pageHeaderClose . '
    </div>

    '. $shadow.'
</section>';
	}


	public function getVideoSection( $atts, $contentRawHtml, $mainContainerAtts, $showContainer = true, $data = array() ) {


		$atts = empty( $atts ) ? ( shortcode_atts( $this->extractShortcodeAttributes( $atts ), $atts ) ) : $atts;

		if ( isset( $data['page_header_wrapper'] ) && isset( $data['page_header_wrapper']['open'] ) && isset( $data['page_header_wrapper']['close'] ) ) {
			$pageHeaderOpen  = $data['page_header_wrapper']['open'];
			$pageHeaderClose = $data['page_header_wrapper']['close'];
		} else {
			$pageHeaderOpen  = '';
			$pageHeaderClose = '';
		}
		$shadow = $this->getShadow($atts['shadow']);

		return '
<section ' . $this->buildContainerAttributes( $mainContainerAtts, $atts ) . '>
    <div class="ct-mediaSection-video embed-responsive embed-responsive-16by9">
    <video id="video1" muted loop autoplay="autoplay" preload="auto">
    <source src="' . esc_url( $atts['video_src'] ) . '" type="video/' . esc_attr( $atts['video_type'] ) . '"/>
    </video>
    </div>
    <div class="ct-u-displayTable">
    <div class="ct-mediaSection-inner">
    ' . $pageHeaderOpen . $this->getContainer( 'open', $showContainer ) . $contentRawHtml . $this->getSectionButton( $atts ) . $this->getContainer( 'close', $showContainer ) . $pageHeaderClose . '
</div></div>
'. $shadow.'
</section>';
	}


	public function getNormalSection( $atts, $contentRawHtml, $mainContainerAtts, $showContainer = true, $data = array() ) {

		$atts = empty( $atts ) ? ( shortcode_atts( $this->extractShortcodeAttributes( $atts ), $atts ) ) : $atts;

		//ct-u-paddingBoth80
		return '
<section' . $this->buildContainerAttributes( $mainContainerAtts, $atts ) . '>
' . $this->getContainer( 'open', $showContainer ) . $contentRawHtml . $this->getSectionButton( $atts ) . $this->getContainer( 'close', $showContainer ) . '</section>';
	}


	public function getSectionButton( $atts ) {
		if (
			isset( $atts['section_button'] )
			&& $atts['section_button'] == 'true'
		) {
			return '
		<a class="ct-sectionButton ct-js-btnScroll" href="#' . $atts['container_id'] . '">
		<span class="ct-sectionButton-circle animated pulse activate infinite">
		<i class="fa fa-angle-down animated activate bounce infinite"></i></span>' . $atts['button_label'] . '</a>';
		} else {
			return '';
		}
	}

	/**
	 * Handles shortcode
	 *
	 * @param $atts
	 * @param null $content
	 *
	 * @return string
	 */

	public function handle( $atts, $content = null ) {

		$atts = ( shortcode_atts( $this->extractShortcodeAttributes( $atts ), $atts ) );

		extract( $atts );


		if($atts['scroll'] != 'no'){
			$this->enqueueOnePagerScripts();

		}
		if ( ! isset( $atts ) || ! is_array( $atts ) || empty( $atts ) ) {
			return '';
		}
		//parallax
		if ( $atts['type'] == 'parallax' ) {
			$mainContainerAtts = array(
				'class'                         => array( 'ct-mediaSection', $atts['scroll'], $this->getOverlay($atts['overlay'])),
				'data-stellar-background-ratio' => $atts['parallax_ratio'],
				'data-height'                   => $atts['height'],
				'data-type'                     => 'parallax',
				'data-bg-image'                 => $atts['image'],
				'data-bg-image-mobile'          => $atts['image_mobile'],
				'id'                            => $atts['section_id']
			);
			if ( $with_container == 'no' ) {
				$with_container = false;
			} else {
				$with_container = true;
			}
			return do_shortcode( $this->getParallaxSection( $atts, $content, $mainContainerAtts, $with_container ) );
		}
		//kenburns
		if ( $atts['type'] == 'ken_burns' ) {
			$mainContainerAtts = array(
				'class'                => array( 'ct-mediaSection', $atts['scroll'] ),
				'data-height'          => $atts['height'],
				'data-type'            => 'kenburns',
				'data-bg-image-mobile' => $atts['image_mobile'],
				'id'                   => $atts['section_id']
			);

			if ( $with_container == 'no' ) {
				$with_container = false;
			} else {
				$with_container = true;
			}

			return do_shortcode( $this->getKenBurnsSection( $atts, $content, $mainContainerAtts, $with_container ) );
		}
		//video
		if ( $atts['type'] == 'video' ) {
			$mainContainerAtts = array(
				'class'                => array( 'ct-mediaSection', $atts['scroll'] ),
				'data-height'          => $atts['height'],
				'data-type'            => 'video',
				'data-bg-image-mobile' => $atts['image_mobile'],
				'id'                   => $atts['section_id']
			);

			if ( $with_container == 'no' ) {
				$with_container = false;
			} else {
				$with_container = true;
			}

			return do_shortcode( $this->getVideoSection( $atts, $content, $mainContainerAtts, $with_container ) );
		}

		//default
		if ( $atts['type'] == 'default' ) {
			$mainContainerAtts = array(
				'class'                => array( 'default', $atts['scroll'] ),
				'data-height'          => $height,
				'data-type'            => '',
				'data-bg-image-mobile' => $atts['image_mobile'],
				'id'                   => $atts['section_id']
			);

			if ( $with_container == false ) {
				$with_container = false;
			} else {
				$with_container = true;
			}

			return do_shortcode( $this->getNormalSection( $atts, $content, $mainContainerAtts, $with_container ) );
		}
	}

	/**
	 * Returns config
	 * @return null
	 */
	public function getAttributes() {

		return array(

			'type'            => array(
				'label'   => __( 'Type', 'ct_theme' ),
				'default' => 'default',
				'type'    => 'select',
				'options' => array(
					'default'   => 'default',
					'parallax'  => 'parallax',
					'ken_burns' => 'kenburns',
					'video'     => 'video',
				)
			),


			'section_id'              => array( 'label' => __( 'ID', 'ct_theme' ), 'default' => '', 'type' => 'input' ),


			'shadow' => array(
				'label' => __('Shadow', 'ct_theme'),
				'default' => 'no',
				'type' => 'select',
				'options' => array(
					'no' => __('no', 'ct_theme'),
					'yes' => __('yes', 'ct_theme'),
				),
				'dependency' => array(
					'element' => 'type',
					'value' => array('parallax', 'ken_burns', 'video')
				)
			),

			'overlay' => array(
				'label' => __('Overlay', 'ct_theme'),
				'default' => 'no',
				'type' => 'select',
				'options' => array(
					'no' => __('no', 'ct_theme'),
					'yes' => __('yes', 'ct_theme'),
				),
				'dependency' => array(
					'element' => 'type',
					'value' => array('parallax')
				)
			),



			'height'          => array( 'label' => __( 'Height', 'ct_theme' ), 'default' => '200', 'type' => 'input' ),
			'content'         => array(
				'label'   => __( 'content', 'ct_theme' ),
				'default' => '',
				'type'    => "textarea"
			),

			'parallax_ratio'  => array(
				'label'      => __( 'Parallax Ratio', 'ct_theme' ),
				'default'    => 0.1,
				'type'       => 'input',
				'dependency' => array(
					'element' => 'type',
					'value'   => array( 'parallax')
				)
			),

			'image_mobile'    => array(
				'label'      => __( "Background Image Mobile", 'ct_theme' ),
				'default'    => '',
				'type'       => 'image',
				'help'       => __( "Image source", 'ct_theme' ),
				'dependency' => array(
					'element' => 'type',
					'value'   => array( 'parallax', 'ken_burns' )
				)
			),
			'image'           => array(
				'label'      => __( "Background Image", 'ct_theme' ),
				'default'    => '',
				'type'       => 'image',
				'help'       => __( "Image source", 'ct_theme' ),
				'dependency' => array(
					'element' => 'type',
					'value'   => array( 'parallax')
				)
			),

			'kenburns_images' => array(
				'label'      => __( "Background Image Kenburns", 'ct_theme' ),
				'default'    => '',
				'type'       => 'images',
				'help'       => __( "Kenburns images", 'ct_theme' ),
				'dependency' => array(
					'element' => 'type',
					'value'   => array( 'ken_burns' )
				)
			),
			'video_src'       => array(
				'label'      => __( 'Video Background SRC', 'ct_theme' ),
				'default'    => '',
				'type'       => 'input',
				'dependency' => array(
					'element' => 'type',
					'value'   => array( 'video' )
				),
			),
			'video_type'      => array(
				'label'      => __( 'Video type', 'ct_theme' ),
				'default'    => 'mp4',
				'type'       => 'select',
				'choices'    => array(
					'mp4'  => __( 'Mp4 direct link', 'ct_theme' ),
					'webm' => __( 'Webm direct link', 'ct_theme' ),
				),
				'dependency' => array(
					'element' => 'type',
					'value'   => array( 'video' )
				)
			),
			'with_container'  => array(
				'label'   => __( "With container", 'ct_theme' ),
				'type'    => 'checkbox',
				'default' => 'true',
				'value'   => 'true',
			),
			'section_button'  => array(
				'label'   => __( "Next section scroll button", 'ct_theme' ),
				'type'    => 'checkbox',
				'default' => 'false',
				'value'   => 'true',
			),
			'button_label'    => array(
				'label'      => __( 'Section buttom label', 'ct_theme' ),
				'default'    => '',
				'type'       => 'input',
				'dependency' => array(
					'element' => 'section_button',
					'value'   => array( 'true' )
				)
			),
			'container_id'    => array(
				'label'      => __( 'Next container ID', 'ct_theme' ),
				'default'    => '',
				'type'       => 'input',
				'dependency' => array(
					'element' => 'section_button',
					'value'   => array( 'true' )
				)
			),
			'scroll'          => array(
				'label'   => __( 'Onepager element ?', 'ct_theme' ),
				'default' => 'no',
				'type'    => 'select',
				'choices' => array(
					'section' => __( 'yes', 'ct_theme' ),
					''  => __( 'no', 'ct_theme' )
				),
				'help'    => __( "When using onepager page, enable this option if your navigation should scroll to this element.", 'ct_theme' )
			),


		);


	}

	/**
	 * Returns additional info about VC
	 * @return ctVisualComposerInfo
	 */
	public function getVisualComposerInfo() {
		return new ctVisualComposerInfo( $this, array( 'icon' => 'fa-cogs', 'container' => true ) );
	}
}

new ctSectionShortcode();