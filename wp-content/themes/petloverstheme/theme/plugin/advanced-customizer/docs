+*Frontend*+
  *Less files*
  All less file must to be located in one folder.
  *File with default values*
  All variables which default values customizer have to be defined in one file, customizer doesn't look for default values in imported files. You can use operations and functions when define new variable. Default file with variables is _variables.less_. You can not use rgba values as default - we have not controls to support it. Add opacity to variable later.
  *Files to compile*
  These files is a normal less files as always for themes. By default plugin is compiling _style.less_, _style2.less_ and _style3.less_.

  *+Backend+*
  *Actions*
  Plugin is doing 2 actions. First @ct_customizer_mapper_pre@ with one argument object of @ctAdvancedCustomizer@. It's called before mapper is created, and @ct_customizer_mapper_post@ with one argument - @ctControlsMapper@ after creating mapper.
  *Adding new controls, panels and sections*
  To do this use @ct_customizer_mapper_post@ action. @ctControlsMapper@ has few simple methods to adding panels, sections and controls:
  *  @panel( $name, $options = array() )@
  to add (if not created yet) and use new panel. This method is doing @ct_customizer_panel_add_{$id}@ action.
  ** @$name@ is a title of panel, remember about use translate function!
  ** <pre>options = array(
      'priority'       => 10,
      'capability'     => 'edit_theme_options',
      'theme_supports' => '',
      'description'    => '',
      'id'             => '', // see creating plugin with predefinited options
  )</pre> _(optional)_ - docs at wordpress
  *  @endPanel( )@ to stop using this panel.
  *  @section( $name, $options = array() )@
  to add (if not created yet) and use new section. This method is doing @ct_customizer_section_add_{$id}@ action.
  ** @$name@ is a title of section, remember about use translate function!
  ** <pre>options = array(
      'priority'       => 10,
      'capability'     => 'edit_theme_options',
      'theme_supports' => '',
      'description'    => '',
      'id'             => '', // see creating plugin with predefinited options
  )</pre> _(optional)_ - docs at wordpress,
  * @ endSection( )@ to stop using this section.
  *  @add( $lessname, $title, $type, $options = array() )@
  to add new constol.
  ** @$lessname@ is a name of lessvariable (with or without @ at the beginning).
  ** @$title@ is a label of control, remember about use translate function!
  ** @$type@ _(optional)_ - is a type of control, see _Controls types_ below, default value is 'input'
  ** <pre>options = array(
      'priority'       => 10,
      'capability'     => 'edit_theme_options',
      'default'              => '',
      'theme_supports' => '',
      'transport'            => 'refresh',
      'sanitize_callback'    => '',
      'sanitize_js_callback' => '',
  )</pre> _(optional)_ - docs at wordpress. if @default@ isn't set it will be imported from less files. there is a place for other options for specific controls.

  *Controls types*
  * included types:
  ** @input@ - class WP_Customize_Control - docs at worpress
  ** @color@ - class WP_Customize_Color_Control - docs at worpress
  ** @font@ - class ctGoogleFontControl - to set font family. additional options are: <pre> array(
      'amount' => 'all', //int or string 'all' for all google web fonts
  )</pre>
  ** @fontset@ - class ctSubsetFontControl - to font subset. @$lessname@ for this contorl is a @$lessname@ of fontfamily control with suffix @set@;
  ** @numberselect@ - class ctNumberSelectControl - to make a select for numbers. additional options are: <pre> array(
      'min' => null, //int - minimal value of select
      'max' => null, //int - maximal value of select
      'step' => 1, //int - step of select values
      'suffix' => '' //string - suffix for values
  )</pre>

  *Ading new control*
  It's really easy.
  # create new class which extends WP_Customize_Control
  # include your file with control
  # use action @ct_customizer_mapper_pre@ to get instance of ctControlsFactory and register your control <pre>ctControlsFactory::getInstance()->register('typeName', 'controlClassName');</pre>
  # use filter @ct_customizer_value_@ to filter value before send it to lesscompiler. If filter method will retern false, variable will not be send to compiler. In default if your class implements @ctControlsFilterableInterface@, than @$object->filter($val, $obj)@ will be executed. See classes @ctSubsetFontControl@ and @ctNumberSelectControl@ for example usage.
  # have fun!


  *Overriding options*
  Use action @ct_customizer_mapper_pre@ to override plugins options.
  It's possible override options:
  ** Less files dir. Use method @setLessDir($dirname)@. Default: @CT_THEME_DIR . '/assets/less'@
  ** CSS files dir. Use method @setCssDir($dirname)@. Default: @ wp_upload_dir()['basedir']@. If you want to change it remember about change CSS files URL.
  ** CSS files dir. Use method @setCssDir($dirname)@. Default: @ wp_upload_dir()['basedurl']@.
  ** Less files to compile. Use methods @addStyleName($name)@ and @removeStyleName($name)@ to change files to compile. @$name@ have to be whitout filename extension. Default: <pre>array(
      'style',
      'style2',
      'style3',
  );</pre>
  ** Less files to import default variables. Use methods @setLessVariables($name)@ to change files to compile. @$name@ have to be whitout filename extension. Default: @variables@

  *Example*
  Don't use auto code formating. it's ugly!
  <pre>
  $mapper
      ->panel( __('Main options', 'ct_theme') )
          ->section( __('General', 'ct_theme') )
              ->add( 'motive', __('motive', 'ct_theme'), 'color' )
              ->add( 'complet', __('complet', 'ct_theme'), 'color' )
          ->endSection()
          ->section( __('Main font', 'ct_theme') )
              ->add( 'fontset', __('Font Set', 'ct_theme'), 'fontset' )
              ->add( 'font', __('Font Family', 'ct_theme'), 'font' )
              ->add( 'font-size',
                  __('Size', 'ct_theme'),
                  'numberselect',
                  array( 'min' => 12, 'max' => 26, 'suffix' => 'px', 'step' => 2 ) )
          ->endSection()
      ->panel(__('Bootstrap', 'ct_theme'))
          ->section( __('Colors', 'ct_themne') )
              ->add( 'gray-darker', __('gray-darker', 'ct_theme'), 'color' )
              ->add( 'gray-dark', __('gray-dark', 'ct_theme'), 'color' )
              ->add( 'gray', 'gray', __('color', 'ct_theme') )
              ->add( 'gray-light', __('gray-light', 'ct_theme'), 'color' )
              ->add( 'gray-lighter', __('gray-lighter', 'ct_theme'), 'color' )
              ->add( 'brand-primary', __('brand-primary', 'ct_theme'), 'color' )
          ->endSection()
      ->endPanel();
  </pre>

  *creating plugin with predefinited options*
  You can create a plugin, which will adding standard sections/controls for specific panel/section. You have to add action to @ct_customizer_panel_add_{$customId}@ or @ct_customizer_panel_add_{$customId}@, where the argument is @ctControlsMapper@. When you are adding predefined panels or sections remember to add @'id'@ param in options array.